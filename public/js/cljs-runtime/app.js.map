{"version":3,"sources":["app.cljs"],"mappings":"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","names":["app/start","js/console.log","app/-main","app/body","js/document","app/w","app/h","app/palette","app/particle","id","quil.core.random","cljs.core/rand-nth","app/sketch-setup","cljs.core.map","cljs.core.range","app/position","current","delta","max","cljs.core/mod","app/noise-zoom","app/direction","x","y","z","Math/PI","quil.core.noise","app/velocity","app/sketch-update","particles","p","cljs.core.assoc","Math/cos","Math/sin","app/sketch-draw","quil.core/no-stroke","seq__12395","cljs.core/seq","chunk__12396","count__12397","i__12398","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core.apply","quil.core/fill","cljs.core.conj","quil.core/ellipse","app/create","canvas","quil.core.sketch","quil.middleware/fun-mode","quil.core/random-seed","quil.core/noise-seed","js/app","js/app.sketch","app/sketch"],"sourcesContent":["(ns app\n  (:require [quil.core :as q]\n            [quil.middleware :as middleware]))\n\n;; start is called by init and after code reloading finishes\n(defn ^:dev/after-load start []\n  (js/console.log \"start\"))\n\n(defn -main []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (js/console.log \"init\")\n  (start))\n\n(def body (.-body js/document))\n(def w (.-clientWidth body))\n(def h (.-clientHeight body))\n\n(def palette\n  {:name       \"purple haze\"\n   :background [10 10 10]\n   :colors     [[32 0 40]\n                [82 15 125]\n                [99 53 126]\n                [102 10 150]\n                [132 26 200]\n                [165 32 250]\n                [196 106 251]]})\n\n(defn particle\n  \"Creates a particle map.\"\n  [id]\n  {:id         id\n   :vx         1\n   :vy         1\n   :size       3\n   :direction  0\n   :x          (q/random w)\n   :y          (q/random h)\n   :color      (rand-nth (:colors palette))})\n\n(defn sketch-setup\n  \"Returns the initial state to use for the update-render loop.\"\n  []\n  (map particle (range 0 2000)))\n\n(defn position\n  \"Calculates the next position based on the current, the speed and a max.\"\n  [current delta max]\n  (mod (+ current delta) max))\n\n(def noise-zoom\n  \"Noise zoom level.\"\n  0.0078)\n\n(defn direction\n  \"Calculates the next direction based on the previous position and id of each particle.\"\n  [x y z]\n  (* 2\n     Math/PI\n     (+ (q/noise (* x noise-zoom) (* y noise-zoom))\n        (* 0.2 (q/noise (* x noise-zoom) (* y noise-zoom) (* z noise-zoom))))))\n\n(defn velocity\n  \"Calculates the next velocity by averaging the current velocity and the added delta.\"\n  [current delta]\n  (/ (+ current delta) 2))\n\n(defn sketch-update\n  \"Returns the next state to render. Receives the current state as a paramter.\"\n  [particles]\n  (map (fn [p]\n         (assoc p\n                :x         (position (:x p) (:vx p) w)\n                :y         (position (:y p) (:vy p) h)\n                :direction (direction (:x p) (:y p) (:id p))\n                :vx        (velocity (:vx p) (Math/cos (:direction p)))\n                :vy        (velocity (:vy p) (Math/sin (:direction p)))))\n       particles))\n\n(defn sketch-draw\n  \"Draws the current state to the canvas. Called on each iteration after sketch-update.\"\n  [particles]\n  ;;(apply q/background (:background palette))\n  (q/no-stroke)\n  (doseq [p particles]\n    (apply q/fill (conj (:color p) 3))\n    (q/ellipse (:x p) (:y p) (:size p) (:size p))))\n\n(defn create [canvas]\n  (q/sketch\n   :host canvas\n   :size [w h]\n   :draw #'sketch-draw\n   :setup #'sketch-setup\n   :update #'sketch-update\n   :middleware [middleware/fun-mode]\n   :settings (fn []\n               (q/random-seed 666)\n               (q/noise-seed 666))))\n\n(defonce sketch (create \"sketch\"))\n"]}